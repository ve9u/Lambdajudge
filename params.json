{"name":"Lambdajudge","tagline":"A library to easily host haskell based programming competitions","body":"# Lambdajudge [![Build Status](https://travis-ci.org/venugangireddy/Lambdajudge.svg?branch=master)](https://travis-ci.org/venugangireddy/Lambdajudge)\r\n\r\nLambdajudge is a library to easily host programming contests in haskell. This work is done as a project in [Functional Programming course](http://cse.iitk.ac.in/users/ppk/teaching/Functional-Programming/index.html).\r\n\r\n#### Team members\r\n- [Ankit Kumar](https://github.com/ankitku) (15111010)\r\n- [Venugopal Reddy](https://github.com/venugangireddy) (14111043)\r\n- [Safal Pandita](https://github.com/imhobo) (15111040)\r\n\r\n### How to use\r\n```haskell\r\nimport Lambdajudge\r\n\r\n-- | Check if mueval is present, as lambdajudge needs mueval executable to run\r\ncheck = muevalAvlbl --should return true. Only then can proceed using other functions.\r\n\r\n-- | creating a sample Contest. input and output files are in the project directory\r\ncreateContest :: IO Problem\r\ncreateContest = do\r\n    let dir = \"test/contest1/Q1/\"\r\n    --Creating first problem of contest\r\n    testCase1_1 <- getFileContents (dir </> \"input00.txt\")\r\n    output1_1 <- getFileContents (dir </> \"output00.txt\")\r\n    testCase2_2 <- getFileContents (dir </> \"input02.txt\")\r\n    output2_2 <- getFileContents (dir </> \"output02.txt\")\r\n    problemStatement1 <- getFileContents (dir </> \"ProblemStatement1\")\r\n    problemSetterCode1 <- getFileContents (dir </> \"Solution1/Solution.hs\")\r\n    --Creating second problem of contest\r\n    testCase2_1 <- getFileContents (dir </> \"input10.txt\")\r\n    output2_1 <- getFileContents (dir </> \"output10.txt\")\r\n    testCase2_1 <- getFileContents (dir </> \"input12.txt\")\r\n    output2_1 <- getFileContents (dir </> \"output12.txt\")\r\n    problemStatement2 <- getFileContents (dir </> \"ProblemStatement2\")\r\n    problemSetterCode2 <- getFileContents (dir </> \"Solution2/Solution.hs\")\r\n    -- can further repeat to include more problems.\r\n    let contest = [Problem problemStatement1 [(testCase1_1,output1_1),(testCase1_2,output1_2)] problemSetterCode1 5, \r\n                   Problem problemStatement2 [(testCase2_1,output2_1),(testCase2_2,output2_2)] problemSetterCode2 3]\r\n    return contest\r\n    \r\n---run submitted solution on problem testcase\r\nevaluate = do\r\n            prob1 <- createContest!!1 -- evaluating on first problem of the contest\r\n            runLJMonad $ gradeSubmission prob1 \"SubmittedSolution.hs\"\r\n```\r\n\r\n### Features\r\n- Submitted code is run in mueval, which avoids attacks like unsafePerformIO etc..\r\n- Only runs the \"solution\" function of type  String -> String. Hence, code has to be pure. So Type safety ensures     safety of execution.\r\n- provides logging and error handling for debugging purposes\r\n\r\n###Install from Hackage:\r\n```shell\r\n    $ cabal install Lambdajudge\r\n```\r\n###Install from unpacked release tarball or source repo:\r\n```shell\r\n    $ cd Lambdajudge\r\n    $ cabal install\r\n```\r\n###Just play with it without installing:\r\n```shell\r\n    $ cabal build\r\n    $ cabal repl\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}